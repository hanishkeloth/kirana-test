<?php
/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function pp2_help($path, $arg) {
  switch ($path) {
    case "admin/help#pp2":
      return '<p>' . t("Displays pp2 data") . '</p>';
      break;
  }
} 

/**
 * Implementation of hook_menu()
 */
function pp2_menu() {
  $items['pp2'] = array(
    'title' => 'PP2',
    'type' => MENU_CALLBACK,
    'page callback' => 'pp2_callback',
     'access callback' => 'user_is_logged_in', 
  );
  

  return $items;
}

function pp2_callback($offset,$limit){
global $user;
 $user_full = user_load($user->uid);
 $uid =$user->uid;
 $gender = $user_full->field_gender_profile['und']['0']['value'];
//Condition -1 Followed wishes;
$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid'));
//$query->fields('n', array('type'));
$query->innerJoin('node', 'n', 'ti.nid = n.nid');
$query->condition('n.type','pin');
/*$db_or = db_or();
$db_or->condition('n.type', 'pin', '=');
//$db_or->condition('n.type', 'expression', '=');
$query->condition($db_or);*/
if($gender == 'Male') {
  $query->condition('n.title', '%men%', 'LIKE'); 
  $query->condition('n.title', '%women%', 'NOT LIKE');
  //$query->condition('n.title', '^(.)*([^o]|[^w]o)man(.)*$', 'REGEXP');
} else if($gender == 'Female') {
  $query->condition('n.title', '%women%', 'LIKE'); 
  //$query->condition('n.title', '^(.)*(women)(.)*$', 'REGEXP');
} 

$query->condition('n.type','pin');
$subquery = db_select('flagging', 'ff');
$subquery->fields('ff', array('entity_id'));
$subquery->condition('ff.uid', $uid);
$subquery->condition('ff.entity_type', 'taxonomy_term');
$query->condition('ti.tid', $subquery, 'IN');
//$query->condition('ti.tid', '', '');
$query->distinct();
$query->range(0, 300);
$result = $query->execute();
$wishes = $result->fetchCol('nid');

//$wishes = implode(',',$result);



//condition 2 Random wishes
/*$query = db_select('node', 'n');
$query->fields('n', array('nid', 'type'));

$or = db_or();
$or->condition('n.type', 'pin');
$or->condition('n.status', 1);
$or->condition('n.type', 'expression');
$or->condition('n.status', 1);
$query->condition($or);
$query->orderRandom();
$query->range(0, 1000);
$result = $query->execute();
$random_wishes = $result->fetchCol('nid');*/

$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid'));
//$query->fields('n', array('type'));
$query->innerJoin('node', 'n', 'ti.nid = n.nid');
if($gender == 'Male') {
  $query->condition('n.title', '%men%', 'LIKE'); 
  $query->condition('n.title', '%women%', 'NOT LIKE');
  //$query->condition('n.title', '^(.)*([^o]|[^w]o)man(.)*$', 'REGEXP');
} else {
  $query->condition('n.title', '%women%', 'LIKE'); 
  //$query->condition('n.title', '^(.)*(women)(.)*$', 'REGEXP');
} 
$query->condition('n.type','pin');
//$query->condition('n.type','pin');
$subquery = db_select('flagging', 'ff');
$subquery->fields('ff', array('entity_id'));
$subquery->condition('ff.uid', $uid,'!=');
$subquery->condition('ff.entity_type', 'taxonomy_term');
$query->condition('ti.tid', $subquery, 'IN');
//$query->condition('ti.tid', '', '');
$query->distinct();
$query->range(0, 300);
$query->orderRandom();
$result = $query->execute();
$random_wishes = $result->fetchCol('nid');


//$random = implode(',',$result);


/*//Condition -3 Followed expression;
$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid'));
//$query->fields('n', array('type'));
$query->innerJoin('node', 'n', 'ti.nid = n.nid');
$query->condition('n.type','expression');

$subquery = db_select('flagging', 'ff');
$subquery->fields('ff', array('entity_id'));
$subquery->condition('ff.uid', $uid);
$subquery->condition('ff.entity_type', 'taxonomy_term');
$query->condition('ti.tid', $subquery, 'IN');
//$query->condition('ti.tid', '', '');
$query->distinct();
$query->range(0, 400);
$result = $query->execute();
$expression_follow = $result->fetchCol('nid');



//condition 4  activities
$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid'));
//$query->fields('n', array('type'));
$query->innerJoin('node', 'n', 'ti.nid = n.nid');
//$query->condition('n.type','pin');
$query->condition('n.type','pin');

$subquery = db_select('hashtags_activities', 'ha');
$subquery->fields('ha', array('hashtag_tid'));
$subquery->condition('ha.user_id',$uid );
//$subquery->condition('ff.entity_type', 'taxonomy_term');
$query->condition('ti.tid', $subquery, 'IN');
//$query->condition('ti.tid', '', '');
$query->distinct();
$query->range(0, 400);
//$query->condition($or);
//$query->orderRandom();
$result = $query->execute();
$activities = $result->fetchCol('nid');
*/
//$activities = implode(',',$result);

//condition 5 hashtag blog
$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid'));
//$query->fields('n', array('type'));
$query->innerJoin('node', 'n', 'ti.nid = n.nid');
/*if($gender == 'Male') {
  $query->condition('n.title', '%men%', 'LIKE'); 
  $query->condition('n.title', '%women%', 'NOT LIKE');
  //$query->condition('n.title', '^(.)*([^o]|[^w]o)man(.)*$', 'REGEXP');
} else {
  $query->condition('n.title', '%women%', 'LIKE'); 
  //$query->condition('n.title', '^(.)*(women)(.)*$', 'REGEXP');
} */
$query->condition('n.type','blog');
//$query->condition('n.type','pin');
$subquery = db_select('flagging', 'ff');
$subquery->fields('ff', array('entity_id'));
$subquery->condition('ff.uid', $uid,'=');
$subquery->condition('ff.entity_type', 'taxonomy_term');
$query->condition('ti.tid', $subquery, 'IN');
//$query->condition('ti.tid', '', '');
$query->distinct();
$query->range(0, 300);
$query->orderRandom();
$result = $query->execute();
$blog_i_like = $result->fetchCol('nid');


//condition6  Random blogs

$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid'));
//$query->fields('n', array('type'));
$query->innerJoin('node', 'n', 'ti.nid = n.nid');
/*if($gender == 'Male') {
  $query->condition('n.title', '%men%', 'LIKE'); 
  $query->condition('n.title', '%women%', 'NOT LIKE');
  //$query->condition('n.title', '^(.)*([^o]|[^w]o)man(.)*$', 'REGEXP');
} else {
  $query->condition('n.title', '%women%', 'LIKE'); 
  //$query->condition('n.title', '^(.)*(women)(.)*$', 'REGEXP');
} */
$query->condition('n.type','blog');
//$query->condition('n.type','pin');
$subquery = db_select('flagging', 'ff');
$subquery->fields('ff', array('entity_id'));
$subquery->condition('ff.uid', $uid,'!=');
$subquery->condition('ff.entity_type', 'taxonomy_term');
$query->condition('ti.tid', $subquery, 'IN');
//$query->condition('ti.tid', '', '');
$query->distinct();
$query->range(0, 300);
$query->orderRandom();
$result = $query->execute();
$random_blogs = $result->fetchCol('nid');


$wishes_i_like = $wishes;
$random_wishes = $random_wishes;
$wishes_i_like = array_diff($wishes_i_like, $random_wishes);
$random_wishes = array_diff($random_wishes, $wishes_i_like);

shuffle($wishes_i_like);
shuffle($random_wishes);

//$expression_I_like =$expression_follow;
//$wishes_activities = $activities;
//$blog_i_like = $blogs;
//$random_blogs = $random_blog;

//$blog_i_like = array_diff($blog_i_like, $random_blogs);

//$random_blogs = array_diff($random_blogs, $blog_i_like);



$total_random_wishes = count($random_wishes);
//echo '$total_random_wishes: '.$total_random_wishes.'<br>';
$for_you = $for_you_temp = [];
$current = $randomNext = $expression_next = $blog_next = $random_blog_next = $activity_next = 0;

do {
  // Get 5 records from wishes I like
  if(isset($wishes_i_like[$current])) {
    for($i = 0; $i < 5; $i++) {
      if(isset($wishes_i_like[$current])) {
        $for_you_temp[] =  $wishes_i_like[$current++];
      }
    }
  } else {
    $current++;
  }

  // Get one wish from random wishes
  $for_you_temp[] =  $random_wishes[$randomNext++];
  /*
  // Get one expression from expression I like
  //$expression_I_like = [20, 21, 22];
  if(isset($expression_I_like[$expression_next])) {
  $for_you_temp[] =  $expression_I_like[$expression_next++];
  }
  
  // Get 2 records from  activities
  if(isset($wishes_activities[$activity_next])) {
    for($i = 0; $i < 2; $i++) {
      if(isset($wishes_activities[$activity_next])) {
        $for_you_temp[] =  $wishes_activities[$activity_next++];
      }
    }
  } else {
    $current++;
  }
  */
  
//$blog_i_like = [10, 11, 12];
/*
 // Get 5 records from blog I like
  if(isset($blog_i_like[$blog_next])) {
    for($i = 0; $i < 2; $i++) {
      if(isset($blog_i_like[$blog_next])) {
        $for_you_temp[] =  $blog_i_like[$blog_next++];
      }
    }
  } 
*/
  // Get one wish from random blog
  if(isset($random_blogs[$random_blog_next])) {
  $for_you_temp[] =  $random_blogs[$random_blog_next++];
}

  shuffle($for_you_temp);

  $for_you = array_merge($for_you, $for_you_temp);

  $for_you_temp = [];

} while ($randomNext < $total_random_wishes);
$offset=$_REQUEST['offset'];
$limit=$_REQUEST['limit'];
//$for_you =array_unique($for_you);
$for_you=array_slice($for_you,$offset,$limit);

    drupal_json_output($for_you);
    exit();
//return json_encode($for_you);
}

