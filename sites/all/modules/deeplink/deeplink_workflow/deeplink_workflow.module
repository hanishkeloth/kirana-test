<?php

/**
 * @file
 * Deep link workflow - Allow user to change the state of item when having direct access to a specific item. (Workflow integration)
 */
define('DEEPLINK_WORKFLOW_CONTENT_TYPES', 'deeplink_workflow_content_types');

/**
 * Implementation of hook_permission().
 */
function deeplink_workflow_permission() {
  return array(
    'administer deeplink workflow configuration' => array(
    'title' => t('Administer Deeplink Workflow configuration'),
    'description' => t('Allow user to access and administer Deeplink Workflow configuration.')
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function deeplink_workflow_menu() {
  module_load_include('registry.inc', 'deeplink_workflow');
  return _deeplink_workflow_menu();
}

/**
 * Implementation of hook_theme().
 */
/*
function deeplink_workflow_theme() {
  module_load_include('registry.inc', 'deeplink_workflow');
  return _deeplink_workflow_theme();
}
*/

/**
 * Implementation of hook_node_view().
 */
function deeplink_workflow_node_view($node, $view_mode = NULL, $langcode = NULL) {
  // Not a teaser, and is full page
  if ($view_mode == 'full') { // TODO: add: if (!$node->printing) in D7
    module_load_include('pages.inc', 'deeplink_workflow');
    deeplink_workflow_node_view_deeplink($node);
  }
}

/*
function deeplink_workflow_node_view_form_validate($form, &$form_state) {
  module_load_include('pages.inc', 'deeplink_workflow');
  _deeplink_workflow_node_view_form_validate($form, $form_state);
}

function deeplink_workflow_node_view_form_submit($form, &$form_state) {
  module_load_include('pages.inc', 'deeplink_workflow');
  _deeplink_workflow_node_view_form_submit($form, $form_state);
}
*/

/**
 * Check whether the given type is one that which we want to change the workflow state
 */
function deeplink_workflow_valid_type($type_name) {
  // Check this is a content type we are deeplinking to
  $deeplink_types = array_filter(variable_get(DEEPLINK_WORKFLOW_CONTENT_TYPES, array()));
  return isset($deeplink_types[$type_name]);
}

/**
 * Get available workflow states for based on specified node and current user
 */
function deeplink_workflow_get_states($node) {
  $workflow = workflow_get_workflow_type_map_by_type($node->type);
  foreach (workflow_get_workflow_states() as $data) {
    $states[$data->sid] = check_plain(t($data->state));
  }
  $deleted_states = array();
  $options = array('status' => 0);
  foreach (workflow_get_workflow_states($options) as $data) {
    $deleted_states[$data->sid] = check_plain(t($data->state));
  }
  $current = workflow_node_current_state($node);
  return $states;
}

