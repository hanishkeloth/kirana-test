<?php

/**
* Implements hook_menu.
*/

function image_recognition_menu() {
  $items = array();
  $items['image_recognition/get_color/%'] = array(
    'title' => 'Get the response from image match',
    'description' => 'Get the response from image match',
    'page callback' => '_image_recognition_call_curl',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/image_recognition'] = array(
    'title' => t('Image Recognition Settings'),
    'description' => 'Image Recognition Settings',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/image_recognition/jobs'] = array(
    'title' => 'Image Recognition Jobs',
    'description' => 'Image Recognition Jobs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_recognition_jobs'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/image_recognition/jobs/edit/%'] = array(
    'title' => 'Image Recognition Jobs',
    'description' => 'Image Recognition Jobs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_recognition_jobs',5),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/image_recognition/jobs/delete/%'] = array(
   'title' => 'Delete',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('image_recognition_jobs_delete', 5),
   'access arguments' => array('administer site configuration'),
   'type' => MENU_CALLBACK,
  );
  return $items;
}

function image_recognition_jobs() {
  $form = array();
  $job_type = '';
  $job_id = '';
  if(arg(4) == 'edit' && is_numeric(arg(5))){
    $image_rec_jobs = _get_image_recognition_jobs(arg(5));
    $form['image_job_id'] = array(
    '#type' => 'textfield',
    '#default_value' => arg(5),
    );
    $job_type = $image_rec_jobs->job_type;
    $job_id = $image_rec_jobs->job_id;
  }
  $form['job_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Job type'),
    '#default_value' => $job_type,
    '#required' => TRUE,
  );
  $form['job_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Job Id'),
    '#default_value' => $job_id,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
 $form['output'] = _image_recognition_jobs_save($form, $form_state);
  return $form;
}

function _get_image_recognition_jobs($image_job_id=NULL, $job_type=NULL) {
  if(isset($image_job_id)){
    $query = db_select('image_recognition_jobs', 'irj')
      ->fields('irj',array('job_type','job_id'))
      ->condition('irj.image_job_id',$image_job_id);
      $result = $query->execute()->fetchAll();
  }
  if(isset($job_type)){
    $query = db_select('image_recognition_jobs', 'irj')
      ->fields('irj',array('job_id'))
      ->condition('irj.job_type',$job_type);
      $result = $query->execute()->fetchField();
  }
  if(!empty($result)){
    return $result[0];
  }else{
    return NULL;
  }
}

function image_recognition_jobs_submit($form, &$form_state){
  $job_type = $form_state['values']['job_type'];
  $job_id = $form_state['values']['job_id'];
  if(isset($form_state['values']['image_job_id'])){
    $image_job_id = $form_state['values']['image_job_id'];
    $result = db_update('image_recognition_jobs')
      ->fields(array(
        'job_type' => $job_type,
        'job_id' => $job_id,
      ))
      ->condition('image_job_id', $image_job_id, '=')
      ->execute();
  } else {
    $job_det = _get_image_recognition_jobs(NULL,$job_type);
    if(empty($job_det)){
      db_insert('image_recognition_jobs')
      ->fields(array('job_type' => $job_type,'job_id'=>$job_id))
      ->execute();
    } else {
      form_set_error('job_type','This job already exist');
    }
  }
  $form_state['rebuild'] = TRUE;
}

function _image_recognition_jobs_save($form, $form_state) {
  $jobs_list = db_select('image_recognition_jobs', 'irj')
    ->fields('irj',array('image_job_id','job_type','job_id'))
    ->execute();
  foreach ($jobs_list as $jobs) {
    $rows[] = array(
      'data' => array(
        $jobs->job_type,
        $jobs->job_id,
        l('Edit','admin/config/image_recognition/jobs/edit/'.$jobs->image_job_id),
        l('Delete','admin/config/image_recognition/jobs/delete/'.$jobs->image_job_id),
      )
    );
  }

  $header = array(
    array('data' => 'Job Type'),
    array('data' => 'Job Id'),
    array('data' => 'Edit'),
    array('data' => 'Delete'),
  );

  $html = theme('table',
        array(
          'header' => $header,
          'rows'=>$rows,
          'caption' => 'Image Recognition Jobs', //Optional Caption for the table
          'sticky' => TRUE,           //Optional to indicate whether the table headers should be sticky
          'empty' => 'No jobs added...',   //Optional empty text for the table if resultset is empty
        )
      );
  return array(
    '#markup' => '<div id="image_recognition_job_output">'.$html.'</div>',
  );
}

function image_recognition_jobs_delete($form, &$form_state, $image_job_id) {
  $form = array();
  $form['image_job_id'] = array(
    '#type' => 'value',
    '#value' => $image_job_id,
  );
  return confirm_form($form,
    t('Are you sure you want to delete this Job Type?'),
    'admin/config/image_recognition/jobs',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
  return $form;
}

/**
 * submit handler for the image_recognition_jobs_delete
 * this function is invoked only when the user clicks confirm button
 * clickin on cancel, the user goes back to the $path
 */
function image_recognition_jobs_delete_submit($form, &$form_state) {
  if (isset($form_state['values']['image_job_id'])) {
    $image_job_id = $form_state['values']['image_job_id'];
    $delete_result = db_delete('image_recognition_jobs')
            ->condition('image_job_id',$image_job_id)
            ->execute();
  }
  drupal_set_message('Image Recognition Job deleted successfully');
  $form_state['redirect'] = 'admin/config/image_recognition/jobs';
}


function _image_recognition_call_curl($fid){
  /*$data = array(
    'job_id'         => '20150807-114008-3e13',
    'image_url'      => $filepath,
  );*/

  /*$curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, 'http://54.174.93.25:5000/models/images/classification/classify_one.json');
  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, '30');
  $response = curl_exec($curl);
  curl_close($curl);*/
  /*$response = '{
  "predictions": [
    [
      "pink",
      64.73
    ],
    [
      "orange",
      28.06
    ],
    [
      "brown",
      7.08
    ],
    [
      "green",
      0.13
    ],
    [
      "yellow",
      0.01
    ]
  ]
}';
  return $response;*/

  $file = file_load($fid);
  $uri = $file->uri;
  $filepath = file_create_url($uri);
  $data = array(
    'job_id'         => '20150807-114008-3e13',
    'image_url'      => $filepath,
  );
  /*$curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, 'http://54.174.93.25:5000/models/images/classification/classify_one.json');
  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, '30');
  $response = curl_exec($curl);
  curl_close($curl);*/
  $response = '{
    "predictions": [
      [
        "pink",
        64.73
      ],
      [
        "orange",
        28.06
      ],
      [
        "brown",
        7.08
      ],
      [
        "green",
        0.13
      ],
      [
        "yellow",
        0.01
      ]
    ]
  }';
  $color_value = '';
  $color_predictions = drupal_json_decode($response);
  if(isset($color_predictions['predictions'])){
    $color_value = $color_predictions['predictions'][0][0];
    drupal_json_output($color_value);
  }
}

function callCURLByJobId($job_id, $image_path){
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL,"http://54.174.93.25:5000/models/images/classification/classify_one.json");
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS,
              http_build_query(array('job_id'=>$job_id,'image_url'=>$image_path)));

  // receive server response ...
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.0.3705; .NET CLR 1.1.4322)');

  $server_output = curl_exec ($ch);
  curl_close ($ch);
  $predictions = json_decode($server_output);
  if(isset($predictions->predictions)){
    return $predictions->predictions;
  } else {

  }
}

function _get_irs_job_ids(){
  $job_ids = db_select('image_recognition_jobs', 'irj')
    ->fields('irj', array('job_type','job_id'))
    ->execute()->fetchAll(PDO::FETCH_ASSOC);
  $jobIds_list = [];
  foreach ($job_ids as $key => $value) {
     $jobIds_list[strtolower($value['job_type'])] = $value['job_id'];
  }
  return $jobIds_list;
}

function _image_recognition_predictions($image_path) {
  $jobIds = [
    'gender' => '20150811-095045-b629',
    'category' => '20150811-095045-b629',
    'color' => '20150811-115918-ce66',
    'pattern' => '20150812-182217-e87b',
  ];
  //$jobIds = _get_irs_job_ids();
  $irsPredictions = [];

  $genderPredictions = callCURLByJobId($jobIds['gender'], $image_path);
  $irsPredictions['gender'] = $genderPredictions[0];

  //if($genderPredictions[0] == 'men') {
    if (!array_key_exists('category', $irsPredictions)) {
      $categoryPredictions = callCURLByJobId($jobIds['category'], $image_path);
      $irsPredictions['category'] = $categoryPredictions[0];
    }
    if($categoryPredictions[0] == 'tshirt') {
      if (!array_key_exists('neck', $irsPredictions)) {
        $neckPredictions = callCURLByJobId($jobIds['neck'], $image_path);
        $irsPredictions['neck'] = $neckPredictions[0];
      }

      if (!array_key_exists('sleev', $irsPredictions)) {
        $sleevPredictions = callCURLByJobId($jobIds['sleev'], $image_path);
        $irsPredictions['sleev'] = $sleevPredictions[0];
      }
    }

    if($categoryPredictions[0] == 'shirt') {
      // sleev->full/half, type->formal/partywear/casual
    }

    if($categoryPredictions[0] == 'jeans') {
    }

    if($categoryPredictions[0] == 'shoes') {
    }
  /*} else if($genderPredictions[0] == 'women') {

  } else { //Unisex

  }*/
  $colorPredictions = callCURLByJobId($jobIds['color'], $image_path);
  $irsPredictions['color'] = $colorPredictions[0];

  $colorPredictions = callCURLByJobId($jobIds['pattern'], $image_path);
  $irsPredictions['pattern'] = $colorPredictions[0];

  //$final_prediction = array('shirts','purple','polka');
  $predictions = implode(" ", [$irsPredictions['gender'][0], $irsPredictions['color'][0],$irsPredictions['pattern'][0], $irsPredictions['category'][0]]);
  return $predictions;
}


/**
* Implements of hook_services_resources().
*/
function image_recognition_services_resources() {
  $resource = array(
    'image_recognition' => array(
      'operations' => array(
        'index' => array(
          'help' => 'Image Recognition System',
          'callback' => '_image_recognition_predictions',
          'access callback' => '_image_recognition_provide_access',
          'access arguments' => array('view'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'img',
              'optional' => FALSE,
              'source' => array('param' => 'img'),
              'type' => 'string',
              'description' => 'Image path',
            ),
          ),
        ),
      ),
    ),
  );
  return $resource;
}

/** * Access callback */
function _image_recognition_provide_access() {
  return TRUE;
}
