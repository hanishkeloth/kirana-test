<?php
/**
 * @file
 * Simplenews node handling, sent email, newsletter block and general hooks
 */

/**
 * Implements hook_menu().
 */
function newsletter_subscription_menu() {
  $items['newsletter/subscribe/%'] = array(
    'title' => 'Newsletter unsubscribe',
    'description' => 'unsubscribe to newsletter',
    'page callback' => 'newsletter_subscription_add',
    'page arguments' => array(2),
    'access arguments' => TRUE,
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['newsletter/subscribe'] = array(
    'title' => 'Newsletter subscribe',
    'description' => 'unsubscribe to newsletter',
    'page callback' => 'newsletter_subscription_add',
    'access arguments' => TRUE,
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['subscribers/import'] = array(
    'title' => 'Import Data from CSV File',
    'description' => 'Import newsletter subscribers from <abbr title="Comma Separated Values">CSV</abbr> file.',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page callback' => 'newsletter_subscriber_Importer_pagecallback',
    'type' => MENU_NORMAL_ITEM,
  );

   $items['subscribers/export'] = array(
    'title' => 'Import Data from CSV File',
    'description' => 'Export newsletter subscribers to CSV file.',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page callback' => 'newsletter_subscriber_export',
    'type' => MENU_NORMAL_ITEM,
  );


  return $items;
}


/**
 * Subscribe the user to newsletter
 */
function newsletter_subscription_add($subid = NULL,$user_email='vim00@gmail.com',$uid=5692,$first_name=NULL){
  if(!empty($subid)){
    $unsubscribe = db_update('newsletter_subscriber')
    ->fields(array('activated'=>1,'timestamp' =>strtotime(date("Y-m-d H:i:s"))))
    ->condition('subid', $subid, '=')
    ->execute();
    $out = "<div>";
    if($unsubscribe){
      $out .="You have been successfully resubscribed to this subscriber list.";
    }
    $out.="</div>";
    print $out;
  } else {
    $unsubscriber_detail = array(
      'activated' => 1,
      'first_name' => $first_name,
      'mail' => $user_email,
      'uid' => $uid,
      'timestamp' => strtotime(date("Y-m-d H:i:s")),
      'created' => strtotime(date("Y-m-d H:i:s")),
      'subid' => substr(CRC32(RAND()), 1, 4),
    );
    db_insert('newsletter_subscriber')
      ->fields($unsubscriber_detail)
      ->execute();
    print 'subscribed successfully';
  }

}
/**
 * Unsubscribe the user from newsletter
 */

function newsletter_subscription_remove($subid){
  $unsubscribe = db_update('newsletter_subscriber')
    ->fields(array('activated'=>0,'timestamp' =>strtotime(date("Y-m-d H:i:s"))))
    ->condition('subid', $subid, '=')
    ->execute();
    $out = "<div>";
    if($unsubscribe){
      $out .="You have been successfully removed from this subscriber list. You will no longer hear from us.";
      $out .="<br> Didn't mean to unsubscribe? No problem, <a href='/newsletter/subscribe/".$subid."'>clickhere</a> to re-subscribe to this list with a single click.";
    }
    $out.="</div>";
    print $out;
}

function newsletter_subscriber_Importer_pagecallback(){
    $module_path = drupal_get_path('module', 'csvImporter');

    $form = drupal_get_form('newsletter_subscriber_form');

    $output = "<p>This tool will attempt to import CSV data";
    $output .= drupal_render($form);

    return $output;
  }

  function newsletter_subscriber_form() {
  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data'
  );
  $form['csvfile'] = array(
    '#title' => t('CSV File'),
    '#type'  => 'file',
    '#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', array('!max_size' => format_size($max_size))) : '',
  ) ;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Commence Import'),
  ) ;
  $form['#validate'] = array(
    'newsletter_subscriber_validate_fileupload',
    'newsletter_subscriber_form_validate',
  ) ;
  return $form ;
}

function newsletter_subscriber_validate_fileupload(&$form, &$form_state) {
  $validators = array(
    'file_validate_extensions' => array( 'csv' ),
  );

  if ( $file = file_save_upload('csvfile', $validators, "public://", FILE_EXISTS_REPLACE) ) {
    $form_state['values']['csvupload'] = $file->destination;
  }
  else {
    form_set_error('csvImporter', t('Unable to copy upload file to !dest', array('!dest' => $destination)));
  }
}

function newsletter_subscriber_form_validate(&$form, &$form_state) {
  if(isset($form_state['values']['csvupload'] ) ) {
    if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
      $line_count = 1 ;
      $first = TRUE ;
      if ($line = fgetcsv($handle, 4096)) {
        //-------------------------------------------------------------------------------------------|
        //  This is where you can validate aspects of the file itself, like the number of columns
        //-------------------------------------------------------------------------------------------|
          /*if(count($line) != 3){
            form_set_error('csvfile', t('This file has the incorrect number of columns. Expecting 3'));
          }*/
        //-------------------------------------------------------------------------------------------|
        //  End validating aspects of the CSV file
        //-------------------------------------------------------------------------------------------|
      }
      fclose($handle);
    }
    else {
      form_set_error('csvfile', t('Unable to read uploaded file !filepath', array('!filepath' => $form_state['values']['csvupload'])));
    }
  }
}

function newsletter_subscriber_form_submit(&$form, &$form_state) {
  $batch = array(
    'title' => t('Importing CSV ...'),
    'operations' => array(),
    'init_message' => t('Commencing'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'newsletter_subscriber_import_finished',
  ) ;
  if ( isset( $form_state['values']['csvupload'] ) ) {
    if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
      $batch['operations'][] = array('_newsletter_subscriber_remember_filename', array( $form_state['values']['csvupload'] ) ) ;
      $line_count = 1 ;
      $first = TRUE ;
      $line = fgetcsv($handle, 4096);
      while ( $line = fgetcsv($handle, 4096) ) {
        /**
         * we use base64_encode to ensure we don't overload the batch
         * processor by stuffing complex objects into it
         */
        $batch['operations'][] = array('_newsletter_subscriber_import_line', array(array_map('base64_encode', $line)));
      }
      fclose($handle);
    } // we caught this in csvImporter_form_validate()
  } // we caught this in csvImporter_form_validate()
  batch_set($batch);
}

function newsletter_subscriber_import_finished($success, $results, $operations) {
  if ( !empty($results['failed_rows']) ) {
    $dir  = file_directory_path() . '/csvImporter/' ;
    if ( file_check_directory( $dir, FILE_CREATE_DIRECTORY ) ) {
      $csv_filename = 'failed_rows-'. basename($results['uploaded_filename']); // we validated extension on upload
      $csv_filepath = $dir .'/'. $csv_filename;
      $targs = array(
        '!csv_url' => l(check_plain($csv_filename), $csv_filepath),
        '%csv_filename' => $csv_filename,
        '%csv_filepath' => $csv_filepath,
      ) ;
      if ( $handle = fopen($csv_filepath, 'w+') ) {
        foreach( $results['failed_rows'] as $failed_row ) {
          fputcsv($handle, $failed_row);
        }
        fclose($handle);
        drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'error');
      }
      else {
        drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
      }
    }
    else {
      drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
    }
  }
  return t('The CSV import has completed.');
}

function _newsletter_subscriber_remember_filename($filename, &$context) {
  $context['results']['uploaded_filename'] = $filename;
}

function _newsletter_subscriber_import_line($line, $session_nid, &$context) {

    $context['results']['rows_imported']++;
    $line = $cleaned_line = array_map('base64_decode', $line);
      //Show the row count by default
      $context['message'] = t('Importing row !c', array( '!c' => $context['results']['rows_imported'] ));
      $context['message'] = t('Importing %title', array('%title' => $line[5]));
      drupal_set_message("Parsed line {$line[5]}");
      $subid = db_select('newsletter_subscriber','ns')
        ->fields('ns',array('snid'))
        ->condition('ns.mail',$line[5],'=')
        ->execute()->fetchField();
      if(empty($subid)){
       $uid = NULL;
        $userid = db_select('users','u')
          ->fields('u',array('uid'))
          ->condition('u.mail',$line[5],'=')
          ->execute()->fetchField();
        if(!empty($userid)){
          $uid = $userid;
        }
        $unsubscriber_detail = array(
          'activated' => 1,
          'first_name' => $line[1],
          'last_name' => $line[3],
          'mail' => $line[5],
          'uid' => $uid,
          'timestamp' => strtotime(date("Y-m-d H:i:s")),
          'created' => strtotime(date("Y-m-d H:i:s")),
          'subid' => substr(CRC32(RAND()), 1, 4),
        );
        db_insert('newsletter_subscriber')
          ->fields($unsubscriber_detail)
          ->execute();
      }

      if ( $line[1] == 'ROW' && $line[2] == 'FAILS' ) {
        $context['results']['failed_rows'][] = $line ;
      }
    //-------------------------------------------------------------------------------------------|
    //  End capturing and reporting on failed lines
    //-------------------------------------------------------------------------------------------|
  }

function newsletter_subscriber_export(){
  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=newsletter_subscriber.csv');

  $output = '';
  $keys = array(t('First Name'), t('Last Name'), t('Email'));
  if ($keys) {
    $output .= implode("\t", $keys) . "\n";
  }
  $members = db_select('newsletter_subscriber','ns')
    ->fields('ns',array('first_name','last_name','mail'))
    ->condition('ns.activated','1','=')
    ->execute();
  foreach ($members as $member) {
    //echo "<pre>";print_r($member);
    $output .= $member->first_name . ',' . $member->last_name . ',' . $member->mail . "\n";
  }
  ob_clean();
  print $output;
  exit;
}
