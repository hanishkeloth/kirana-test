<?php
/**
 * @file
 *
 */

/**
 * Implements hook_menu().
 */
function system_recommendations_menu() {
  $items['recommendations/list/%/%/%/%/%/%/%ctools_js'] = array(
    'description' => "Suggestions list",
    'page callback' => '_list_all_recommendations',
    'page arguments' => array(2,3,4,5,6,7,8),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['recommendations/test'] = array(
    'description' => "Suggestions filter form",
    'page callback' => '_suggestion_price_min_max_value',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Function to list all recommendations
 */
function _list_all_recommendations($page=0,$suggestions_type,$sorting,$paging,$price_min_val=NULL,$price_max_val=NULL,$type = 'ajax'){
  $node_id = isset($_POST['node_id']) ? $_POST['node_id'] : '';
  if($suggestions_type == 'system'){
    $data = _get_system_recommendations($node_id,$sorting,$paging,$price_min_val,$price_max_val,$page);
    if ($type == 'ajax'){
        $commands = array();
        $result = array(
        'status' => 'ok',
        'suggestions_type' => $suggestions_type,
        'html' => $data,
        );
        drupal_json_output($result);
    } else {
        $output = $data;
        return $output;
    }
  } else if($suggestions_type == 'user') {
    $data = _get_user_recommendations($node_id, $sorting, $paging,$price_min_val,$price_max_val,$page);
    if ($type == 'ajax'){
        $commands = array();
        $result = array(
        'status' => 'ok',
        'suggestions_type' => $suggestions_type,
        'html' => $data,
        );
        drupal_json_output($result);
    } else {
        $output = $data;
        return $output;
    }
  } else if($suggestions_type == 'all') {
    $data = _get_manual_auto_recommendations($node_id, $sorting, $paging,$price_min_val,$price_max_val,$page);
    if ($type == 'ajax'){
        $commands = array();
        $result = array(
        'status' => 'ok',
        'suggestions_type' => $suggestions_type,
        'html' => $data,
        );
        drupal_json_output($result);
    } else {
        $output = $data;
        return $output;
    }
  }
}

/**
* Implements hook_block_info().
*
**/
function system_recommendations_block_info(){
    $blocks = array();
    $blocks['system_suggestions'] = array(
        'info' => t('System suggestions'),
    );
    $blocks['all_suggestions'] = array(
        'info' => t("All Suggestions"),
    );
    $blocks['manual_suggestions'] = array(
        'info' => t("Manual Suggestions"),
    );
    $blocks['suggestions_price_min_max'] = array(
        'info' => t("Suggestions Price Minimum and Maximum value"),
    );
    return $blocks;
}

/**
* Implements hook_block_view().
*
**/

function system_recommendations_block_view($delta = '') {
    $block = array();
    switch ($delta) {
        case 'system_suggestions':
            $block['subject'] = '';
            $block['content'] = _get_system_recommendations();
            break;
        case 'all_suggestions':
          $block['subject'] = '';
          $block['content'] = _get_manual_auto_recommendations();
          break;
        case 'system_suggestions_count':
          $block['subject'] = '';
          $block['content'] = _get_system_recommendations_count();
          break;
        case 'manual_suggestions':
          $block['subject'] = '';
          $block['content'] = _get_user_recommendations();
          break;
          case 'suggestions_price_min_max':
          $block['subject'] = '';
          $block['content'] = _suggestion_price_min_max_value();
          break;
    }
    return $block;
}


/**
 * Implements hook_block_theme().
 */
function system_recommendations_theme() {
    return array(
        'system_suggestions' => array(
            'variables' => array('suggestions' => array()),
            'template' => 'themes/system_suggestions',
        ),
        'manual_system_suggestions' => array(
            'variables' => array('suggestions' => array()),
            'template' => 'themes/manual_system_suggestions',
        ),
        'manual_suggestions' => array(
            'variables' => array('suggestions' => array()),
            'template' => 'themes/manual_suggestions',
        ),
    );
}

/**
 * Implements theme_hook();
 */
function theme_system_recommendations($variables) {
    return $variables['suggestions'];
}


/**
 * Callback function to get all system recommendations
 */
function _system_recommendations_list($kdml_id){
  $api_url = "http://207.182.158.186/api/suggestion/?userid=test%40kdml.co.kr&apikey=da33ce5a51cef8cfe375823f08daf440&unique_id=".$kdml_id;

    $options = array(
        'method' => 'GET',
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $result = drupal_http_request($api_url, $options);
    $suggested_items = array();
    if($result->code == '200'){
        $suggestions = json_decode($result->data,true);
        $suggested_items = $suggestions['items'];
    }
    return $suggested_items;
}
/**
**  Function to get all the Auto Recommendations
*/
function _get_all_system_recommendations(){
	$kdml_id = arg(2);
  $sorting = arg(3);
  $kdml_id = 'REQ11648';
  $suggested_items = _system_recommendations_list($kdml_id);

  if(!empty($suggested_items)) {
        if($sorting == 'price_asc' ){
           usort($suggested_items, function($a, $b) { //Sort the array using a user defined function
              return $a['price'] > $b['price'] ? -1 : 1; //Compare the scores

          });
        }
        else if($sorting=='price_desc'){
            usort($suggested_items, function($a, $b) { //Sort the array using a user defined function
              return $a['price'] < $b['price'] ? -1 : 1; //Compare the scores
            });
        }
        else if($sorting=='recent'){
            usort($suggested_items, function($a, $b) { //Sort the array using a user defined function
              return $a['cdate'] < $b['cdate'] ? -1 : 1; //Compare the scores
            });
        }
      $limit = 5;
      $page = pager_default_initialize(count($suggested_items), $limit, 0);
      $offset = $limit * $page;
      $output = theme('system_suggestions', array('suggestions'=>array_slice($suggested_items, $offset, $limit)));
      $output.= theme('pager');
      //$output = theme('system_suggestions', array('suggestions'=>$suggested_items));
  }else{
    $output = theme('system_suggestions', array('suggestions'=>''));
  }
  return $output;
}

/**
 * Get the total count of Auto Recommendations
 */
function _get_system_recommendations_count($node_id=NULL) {
  if(empty($node_id)){
    $node_id = arg(1);
  }
  $kdml_id = 'REQ'.$node_id;
  //$kdml_id = 'REQ11648';
  $system_items = _system_recommendations_list($kdml_id);
  $recommendations_count['system'] = count($system_items);

  //User Recommendations count
  $manual_items = _retrieve_user_recommendations($node_id);
  $recommendations_count['manual'] = count($manual_items);

  $system_count = count($system_items);
  $manual_count = count($manual_items);
  $system_manual_count = count($system_items)+count($manual_items);
  $recommendations_count['all'] = $system_manual_count;

  return $recommendations_count;
}

/**
 *  Function to get all the Auto Recommendations
 */
function _get_system_recommendations($node_id=NULL,$sorting='affiliates',$paging='5',$price_min_val=NULL,$price_max_val=NULL,$page){
  if(empty($node_id)){
    $node_id = arg(1);
  }
  //$node_id = '11666';
  $kdml_id = 'REQ'.$node_id;
  //$kdml_id = 'REQ11648';
  $suggested_items = _system_recommendations_list($kdml_id);
  if(!empty($suggested_items)) {
    if(!empty($price_min_val) && !empty($price_max_val)) {
      $suggested_items = _price_filter_recommendations($suggested_items,$price_min_val,$price_max_val);
    }

    if($sorting == 'price_asc' ){
       usort($suggested_items, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] < $b['price'] ? -1 : 1; //Compare the price ascending

      });
    }
    else if($sorting=='price_desc'){
        usort($suggested_items, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] > $b['price'] ? -1 : 1; //Compare the price descending
        });
    }
    else if($sorting=='recent'){
        usort($suggested_items, function($a, $b) { //Sort the array using a user defined function
          return $a['cdate'] > $b['cdate'] ? -1 : 1; //Compare the created date
        });
    }
    else if($sorting=='affiliates'){
      $suggested_items = rearrangeAffiliates($suggested_items);
    }
    $_GET['page'] = $page;
    $limit = $paging;
    pager_default_initialize(count($suggested_items), $limit, 0);
    $offset = $limit * $page;
    $output = theme('system_suggestions', array('suggestions'=>array_slice($suggested_items, $offset, $limit)));
    $tmp_q = $_GET['q'];
    $path = drupal_get_path_alias('node/'.$node_id);
    $_GET['q'] = $path;
    $args = array('parameters' => array('suggestions_type' => 'system','suggestions_sorting' => $sorting, 'suggestions_paging' =>$paging));
    $output.=theme('pager',$args);
    $_GET['q'] = $tmp_q;
  }else{
    $output = theme('system_suggestions', array('suggestions'=>''));
  }
  return $output;
}

/**
*  Get all Manual Recommendations for content
*
**/

function _retrieve_user_recommendations($node_id){
  global $user;
  $view2 = views_get_view('all_manual_recommendations');
  $view2->set_display('comments');
  $view2->exposed_input['nid'] = $node_id;
  $view2->execute();
  $manual_recommendations = array();
  $i = 0;
  foreach ($view2->result as $key => $value) {
    $manual_recommendations['items'][$i]['id'] =  $value->_field_data['cid']['entity']->cid;
    $manual_recommendations['items'][$i]['nid'] =  $value->_field_data['cid']['entity']->nid;
    $manual_recommendations['items'][$i]['uid'] =  $value->_field_data['cid']['entity']->uid;
    $manual_recommendations['items'][$i]['doc_uid'] =  '';
    $manual_recommendations['items'][$i]['name'] = $value->_field_data['cid']['entity']->field_suggestion_title['und'][0]['value'];
    $manual_recommendations['items'][$i]['price'] =  $value->_field_data['cid']['entity']->field_suggestion_price['und'][0]['value'];
    $manual_recommendations['items'][$i]['dollar_price'] =  '';
    $manual_recommendations['items'][$i]['price_unit'] =  '';

    $url = file_create_url($value->_field_data['cid']['entity']->field_suggestion_image['und'][0]['uri']);
    $url = parse_url($url);
    $path = $url['path'];

    $manual_recommendations['items'][$i]['img_url'] = $path;
    $manual_recommendations['items'][$i]['description'] = '';
    $manual_recommendations['items'][$i]['ext'] =  '';
    $manual_recommendations['items'][$i]['score'] =  '';
    $manual_recommendations['items'][$i]['cdate'] =  gmdate('Y-m-d h:i:s',$value->_field_data['cid']['entity']->created);
    $manual_recommendations['items'][$i]['redirect_url'] =  $value->_field_data['cid']['entity']->field_suggestion_source['und'][0]['url'];
    $manual_recommendations['items'][$i]['origin_url'] =  $value->_field_data['cid']['entity']->field_suggestion_source['und'][0]['url'];
    //$manual_recommendations['items'][$i]['origin_url_base'] =  parse_url($value->_field_data['cid']['entity']->field_suggestion_source['und'][0]['url']);
    $original_url = parse_url($value->_field_data['cid']['entity']->field_suggestion_source['und'][0]['url']);
    $manual_recommendations['items'][$i]['origin_url_base'] = $original_url['host'];
    $manual_recommendations['items'][$i]['origin_url_base_path'] = $original_url['path'];
    $manual_recommendations['items'][$i]['recommendation_type'] = "manual";
    if(($user->uid == $value->_field_data['cid']['entity']->uid) || (in_array('administrator', $user->roles))){
      $manual_recommendations['items'][$i]['comment_edit_link'] = "comment/".$value->_field_data['cid']['entity']->cid."/edit";
      $manual_recommendations['items'][$i]['comment_delete_link'] = "comment/".$value->_field_data['cid']['entity']->cid."/delete-own";
    } else {
      $manual_recommendations['items'][$i]['comment_edit_link'] = "";
      $manual_recommendations['items'][$i]['comment_delete_link'] = "";
    }
    $i++;

  }

  return $manual_recommendations['items'];
}

function _get_user_recommendations($node_id=NULL,$sorting='affiliates',$paging='5',$price_min_val=NULL,$price_max_val=NULL,$page=0){
  if(empty($node_id)){
    $node_id = arg(1);
  }
  //$node_id = '11666';
  $manual_system_suggestions = _retrieve_user_recommendations($node_id);
  if(!empty($manual_system_suggestions)) {

    if(!empty($price_min_val) && !empty($price_max_val)) {
      $manual_system_suggestions = _price_filter_recommendations($manual_system_suggestions,$price_min_val,$price_max_val);
    }

    if($sorting == 'price_asc' ){
       usort($manual_system_suggestions, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] < $b['price'] ? -1 : 1; //Compare the price ascending

      });
    }
    else if($sorting=='price_desc'){
        usort($manual_system_suggestions, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] > $b['price'] ? -1 : 1; //Compare the price descending
        });
    }
    else if($sorting=='recent'){
        usort($manual_system_suggestions, function($a, $b) { //Sort the array using a user defined function
          return $a['cdate'] > $b['cdate'] ? -1 : 1; //Compare the created date
        });
    }
    else if($sorting=='affiliates'){
      $manual_system_suggestions = rearrangeAffiliates($manual_system_suggestions);
    }
    $_GET['page'] = $page;
    $limit = $paging;
    pager_default_initialize(count($suggested_items), $limit, 0);
    $offset = $limit * $page;
    $output = theme('manual_suggestions', array('suggestions'=>array_slice($manual_system_suggestions, $offset, $limit)));
    $tmp_q = $_GET['q'];
    $path = drupal_get_path_alias('node/'.$node_id);
    $_GET['q'] = $path;
    $args = array('parameters' => array('suggestions_type' => 'user','suggestions_sorting' => $sorting, 'suggestions_paging' =>$paging));
    $output.=theme('pager',$args);
    $_GET['q'] = $tmp_q;
  }else{
    $output = theme('manual_suggestions', array('suggestions'=>''));
  }

  return $output;
}


/**
* Get both Manual and Auto Recommendations
**/
function _get_manual_auto_recommendations($node_id=NULL, $sorting='affiliates', $paging='5',$price_min_val=NULL,$price_max_val=NULL, $page=0) {
  if(empty($node_id)){
    $node_id = arg(1);
  }
  //Retrieve Manual Recommendations
  $manual_recommendations = _retrieve_user_recommendations($node_id);
  //Retrieve Auto Recommendations
  $kdml_id = 'REQ'.$node_id;
  //$kdml_id = 'REQ11648';
  $system_suggestions = _system_recommendations_list($kdml_id);
  $manual_system_suggestions = array();
  if(!empty($manual_recommendations) && !empty($system_suggestions)) {
    $manual_system_suggestions = array_merge($manual_recommendations,$system_suggestions);
  } else if(!empty($manual_recommendations) && empty($system_suggestions)) {
    $manual_system_suggestions = $manual_recommendations;
  } else if(empty($manual_recommendations) && !empty($system_suggestions)) {
    $manual_system_suggestions = $system_suggestions;
  }
  //echo "<pre>";print_r($manual_system_suggestions);exit;
  if(!empty($manual_system_suggestions)) {
    if(!empty($price_min_val) && !empty($price_max_val)){
      $manual_system_suggestions = _price_filter_recommendations($manual_system_suggestions,$price_min_val,$price_max_val);
    }
    if($sorting == 'price_asc' ){
       usort($manual_system_suggestions, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] < $b['price'] ? -1 : 1; //Compare the price ascending

      });
    }
    else if($sorting=='price_desc'){
        usort($manual_system_suggestions, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] > $b['price'] ? -1 : 1; //Compare the price descending
        });
    }
    else if($sorting=='recent'){
        usort($manual_system_suggestions, function($a, $b) { //Sort the array using a user defined function
          return $a['cdate'] > $b['cdate'] ? -1 : 1; //Compare the cdate
        });
    }
    else if($sorting=='affiliates'){
      $manual_system_suggestions = rearrangeAffiliates($manual_system_suggestions);
    }
    $price_min_max = _get_price_min_max_val($manual_system_suggestions);
    $_GET['page'] = $page;
    $limit = $paging;
    pager_default_initialize(count($manual_system_suggestions), $limit, 0);
    $offset = $limit * $page;
    $output = theme('manual_system_suggestions', array('suggestions'=>array_slice($manual_system_suggestions, $offset, $limit)));
    $tmp_q = $_GET['q'];
    $path = drupal_get_path_alias('node/'.$node_id);
    $_GET['q'] = $path;
    $args = array('parameters' => array('suggestions_type' => 'all','suggestions_sorting' => $sorting, 'suggestions_paging' =>$paging),'tags' => array('<<','<','','>','>>'));

    $output.=theme('pager',$args);
    $_GET['q'] = $tmp_q;
    drupal_add_js(array('system_recommendations' => array('price_min' => intval($price_min_max['min']))), 'setting');
    drupal_add_js(array('system_recommendations' => array('price_max' => intval($price_min_max['max']))), 'setting');
  }else{
    /*drupal_add_js(array('system_recommendations' => array('price_min' => 0)), 'setting');
    drupal_add_js(array('system_recommendations' => array('price_max' => 0)), 'setting');*/
    $output = theme('manual_system_suggestions', array('suggestions'=>''));
  }
  return $output;
}

/**
* Hide User Recommendations views exposed form fields
**/
function system_recommendations_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $view = &$form_state['view'];
  if ($view->name == 'user_recommendations' && ($view->current_display == 'page' || $view->current_display == 'default')) {
    $form['nid']['#attributes']['style'][] = 'display:none;';
      $form['sort_by']['#attributes']['style'][] = 'display:none;';
      $form['sort_order']['#attributes']['style'][] = 'display:none;';
      $form['items_per_page']['#attributes']['style'][] = 'display:none;';
      $form['sort_order']['#title'] = Null;
      $form['sort_by']['#title'] = Null;
      $form['items_per_page']['#title'] = Null;
      $form['submit']['#attributes']['style'][] = 'display:none;';
  }
}

//Get the price filtered array
function _price_filter_recommendations($manual_recommendations,$min,$max) {
  $filtered_items = array();
  $i=0;
  foreach ($manual_recommendations as $key => $value) {
    if($value['price'] >= $min && $value['price'] <= $max){
      $filtered_items['items'][$i] = $value;
    }
    $i++;
  }
  return $filtered_items['items'];
}

/**
* Find out Price Minimum and Maximum value from an suggestions array
**/
function _get_price_min_max_val($arr){
  //Price Maximum value
  usort($arr, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] > $b['price'] ? -1 : 1; //Compare the price ascending
        });
  $price_min_max['max'] = $arr[0]['price'];

  //Price Minimum Value
  usort($arr, function($a, $b) { //Sort the array using a user defined function
          return $a['price'] < $b['price'] ? -1 : 1; //Compare the price descending
        });
  $price_min_max['min'] = $arr[0]['price'];
  return $price_min_max;
}

function _suggestion_price_min_max_value($node_id=NULL){
  if(empty($node_id)){
    $node_id = arg(1);
  }
  //Retrieve Manual Recommendations
  $manual_recommendations = _retrieve_user_recommendations($node_id);

  //Retrieve Auto Recommendations
  $kdml_id = 'REQ'.$node_id;
  //$kdml_id = 'REQ11648';
  $system_suggestions = _system_recommendations_list($kdml_id);
  $manual_system_suggestions = array();
  if(!empty($manual_recommendations) && !empty($system_suggestions)) {
    $manual_system_suggestions = array_merge($manual_recommendations,$system_suggestions);
  } else if(!empty($manual_recommendations) && empty($system_suggestions)) {
    $manual_system_suggestions = $manual_recommendations;
  } else if(empty($manual_recommendations) && !empty($system_suggestions)) {
    $manual_system_suggestions = $system_suggestions;
  }
  if(!empty($manual_system_suggestions)) {
    $price_min_max = _get_price_min_max_val($manual_system_suggestions);
  }
  return $price_min_max;
}


/**
 * Ordering the Recommendations based on the Affiliates
 */
function rearrangeAffiliates($records) {
  $SET = 1;
  $maxAffiliateRecords = 0;
  $tempRearrangedAffiliates = $rearrangedAffiliates = [];
  $affiliates = [
                  'dl.flipkart.com',
                  'www.flipkart.com',
                  'www.amazon.in',
                  'www.shopclues.com',
                  'www.shimply.com',
                  'www.snapdeal.com',
                  'www.infibeam.com',
                ];
  $restOfTheAffiliates[] = array_filter($records, function($record) use ($affiliates) {
    if (!in_array($record['origin_url_base'], $affiliates)) {
      return $record;
    }
  });

  /*$affiliates = ['flipkart','amazon','shopclues','shimply','snapdeal','infibeam'];

  $restOfTheAffiliates[] = array_filter($records, function($record) use ($affiliates) {
    foreach($affiliates as $affiliate)
      if(!strpos($affiliate, $record['origin_url_base']) !== FALSE) return $record;
  });*/

  $restOfTheAffiliates = $restOfTheAffiliates[0];

  foreach ($affiliates as $affiliate) {
    $tempRearrangedAffiliates[$affiliate][] = array_filter($records, function($record) use ($affiliate) {
     if($record['origin_url_base'] == $affiliate) {
        return $record;
      }
      //if(strpos($record['origin_url_base'],$affiliate) !== FALSE) return $record;
    });

    if(count($tempRearrangedAffiliates[$affiliate][0]) > $maxAffiliateRecords) {
      $maxAffiliateRecords = count($tempRearrangedAffiliates[$affiliate][0]);
    }

    $tempRearrangedAffiliates[$affiliate] = array_values($tempRearrangedAffiliates[$affiliate][0]);
  }

  for($i = 0; $i < $maxAffiliateRecords; $i += $SET) {
    foreach ($affiliates as $affiliate) {
      for ($j = $i; $j < $i + $SET; $j++) {
        if (isset($tempRearrangedAffiliates[$affiliate][$j])) {
          $rearrangedAffiliates[] = $tempRearrangedAffiliates[$affiliate][$j];
        }
      }
    }
  }
  $rearrangedAffiliates = array_merge($rearrangedAffiliates, $restOfTheAffiliates);
  return $rearrangedAffiliates;
}
