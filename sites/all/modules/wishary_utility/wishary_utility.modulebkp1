<?php
/**
 * Implementation of hook_block_info
 * 
 */
function wishary_utility_init() {
	
	if (isset($_SESSION['go_anchor'])) {
	  
    $anchor = $_SESSION['go_anchor'];
    unset($_SESSION['go_anchor']);
	//echo $anchor;exit;
   // drupal_goto($_GET['q'], array('fragment' => $anchor));
	  drupal_goto($anchor);
    exit;
	//unset($_SESSION['go_anchor']);
  }
 }


/**
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query
 */
function wishary_utility_views_query_alter(&$view, &$query) {
  if ($view->name == 'All' || $view->name == 'flitto' || $view->name == 'Popular' || $view->name == 'grid_popular' ) {
 	$repins= remove_repinned();
	$join = new views_join();
    $join->table = 'pinboard_repins';
	$join->field = 'nid';
	$join->left_table = 'node';
	$join->left_field = 'nid';
    $join->type = 'left';
	
	$join1 = new views_join();
    $join1->table = 'pinboard_follow';
	$join1->field = 'uid';
	$join1->left_table = 'node';
	$join1->left_field = 'uid';
    $join1->type = 'left';
	/*we can add orderby here as below -begin*/
	//	$query->orderby [0] = 'CASE WHEN node.nid IN '.$result.' THEN 1  ELSE 0 END';
	//$view->query->add_orderby(NULL,$result,'ASC', array());
	 // $view->query->orderby[0]['field'] = "node.nid";
     // $view->query->orderby[0]['direction'] = "DESC";
    /*we can add orderby here as below -end*/
        $query->add_where(1,'pinboard_repins.nid', $repins,"in");
        $query->add_relationship('pinboard_repins', $join, 'node');
		$query->add_relationship('pinboard_follow', $join, 'node');
	 //   $view->$query->orderBy('pinboard_repins.nid','DESC'); 
	// $view->set_items_per_page(10);
		
	}
}
function get_sorted_array() {
		global $user;
		$uids = db_select('pinboard_follow','p')
            ->condition('p.aid',$user->uid);
        $uids->addExpression('distinct(p.uid)');
        $uids = $uids->execute()->fetchCol();
		
		
        if (count($uids)) foreach ($uids as $uidi) {
            $ui = user_load($uidi);
            if ($ui->uid) {
				$result = db_query('select n.nid as nid from {node} n 
				where n.uid = :uidi',array(':uidi'=>$uidi))->fetchAll();
				foreach($result as $rec) {
					$nids[] = $rec->nid;
					
				}
				return $nids;
				//array_splice($view->result,0,5,$result);
				
				//print_r($view->result);//exit;
			
			}
		}
}
	
function remove_repinned() {
	$repins =db_query('SELECT v.nid FROM pinboard_repins v where v.did = v.nid')->fetchCol();
	return $repins;
}

/**
 * Implementation of hook_views_pre_render()
 *
 * @param view $view
 */
 
function wishary_utility_views_pre_render(&$view) {
//echo 2; exit;
  // Check if this is the view and display you want to manipulate
  // NOTE: Adjust/Remove the display check, if you want to manipulate some/all displays of the view
	if ('All' == $view->name ) {// && 'YourDisplayName' == $view->current_display) {
     	global $user;
	  if($user->uid){
		$uids = db_select('pinboard_follow','p')
            ->condition('p.uid',$user->uid);
        $uids->addExpression('distinct(p.aid)');
        $uids = $uids->execute()->fetchCol();
		$results = array();
		
        if (count($uids)) foreach ($uids as $uidi) {
            $ui = user_load($uidi);
            if ($ui->uid) {
				$results[] = db_query('select  n.created as node_created,n.nid as nid from {node} n 
				where n.uid = :uidi',array(':uidi'=>$uidi))->fetchAll();
				
				
			}
		}
		$res_arr = array();
		foreach($results as $result) {
			$res_arr = array_merge($res_arr,$result);
		}
		foreach($res_arr as $nid) {
			$nid_resarray[] = $nid->nid;
		}
		/* altering $view->result based on following post,gender - begin */
		for($i=(count($view->result)-1);$i>=0;$i--) {
		//for($i=0;$i<count($view->result);$i++) {
			$node = node_load($view->result[$i]->nid);
			$tid = field_get_items('node', $node, 'field_category1');
			$term = taxonomy_term_load($tid[0]['tid']);
            $termname = $term->name;
			$user_fields = user_load($user->uid);
			$gender  = $user_fields->field_gend['und']['0']['value'];
			$gender = isset($gender) && ($gender == 'Female')? 'Women':'Men';
		//exit;
			
			if(in_array($view->result[$i]->nid,$nid_resarray)) {
				
				$temp[] = $view->result[$i];
				unset($view->result[$i]);
				
			}
				if (strpos($termname,$gender) !== false){
				//print($termname);
				//continue;
				$temp_gender[] = $view->result[$i];
				unset($view->result[$i]);
			}
		
			
			
			
		}
		
		for($i=0;$i<count($temp);$i++)
		{
			array_unshift($view->result,$temp[$i]);
			
		}
		for($i=0;$i<count($temp_gender);$i++)
		{
			array_unshift($view->result,$temp_gender[$i]);
			
		}
		
		/* altering $view->result based on following,gender - end */
	  }
	  else
	  {
		//$view->result = array();
	  }
		
	}
}
function category_items($categories = 'categories'){
	$vid = taxonomy_vocabulary_machine_name_load($categories)->vid;
	$tree = taxonomy_get_tree($vid);
	if (strpos($a,'Men') !== false) 
		$gender = 'Men';
	else if(strpos($a,'Women') !== false) 
		$gender = 'Women';
	else
		$gender = '';
	return $gender;
}
/**
 * Implementation of hook_menu()
 */
 
function wishary_utility_menu()
{
	$items = array();
	$items['user_bookmarks'] = array(
    'page callback' => 'viewownbookmarks',
   // 'access arguments' => array('access content'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['subscribe_newsletter'] = array(
    'title' => 'Subscribe to news letter',
    'description' => '',
    'page callback' => 'category_items',
   // 'page arguments' => array('bookmark_user'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
   );
  
  return $items;
}
/**
 * Page callback for menu user_bookmarks
 */

function viewownbookmarks() {
  global $user;
  if ($user->uid) {
  $title = ucfirst($user->name) .  "'s&nbspBookmarks";
  drupal_set_title($title, PASS_THROUGH);
  $bookmarks = flag_get_user_flags('node');
 // print_r($bookmarks);exit;  //_get_user_bookmarks($user->uid);
  //print_r($menus_ids);
   return theme('wishary_utility_theme_bookmarks',array('items'=>$bookmarks));
 }
}
/*
function wishary_utility_theme_bookmarks($bookmarks){
 echo 2; exit;
}*/
/**
*   Implementation of hook_theme()
*/	
function wishary_utility_theme() {   

$module_path = drupal_get_path('module', 'wishary_utility');
//print_r($module_path);exit;
$items = array();

  $base = array(
    'path' => "$module_path/theme",   
  ); 
  return array(
    'wishary_utility_theme_bookmarks' => $base + array(
      'template' => 'user-book-marks',  
      'variables' => array('items' =>$items),
    ),
  );
}
function bookmark_user($form, &$form_state) {
 $text = 'Enter your Email';	
 $form['nid'] = array(
  '#type' => 'text',
  '#title' => t('Subscribe to our newsletter'),
  '#default_value' => $text,
  '#weight' => 0,
  '#attributes' => array(
        'onfocus' => "if (this.value == '$text') {this.value = '';}",
        'onblur' => "if (this.value == '') {this.value = '$text';}")
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );

  $form['#submit'][] = 'bookmark_user_submit';
//  $form['#validate'][] = 'bookmark_user_validate';
  
  return $form;
}
function subscribe_newsletter_submit($form, &$form_state) {
  $values = $form_state['values'];
  $value = trim($values['nid']);
   if ($value) {
  //  $mailid = check_plain($value);
    //if(subscribe_letter_insert($mailid))
    //{
     drupal_set_message(t("Thank you for subscribing to newsletter."));
    //}
  }
}




/**
 * Helper function to retrieve users bookmarked pins
 */
/*
function _get_user_bookmarks($uid){
	$query = db_select('flagging', 'f');
	$query->fields('f', array('entity_id', 'uid'));
	$query->condition('f.uid',$uid, '=');
	$query->condition('f.entiy_type','node', '=');
	$result = $query->execute()->fetchAll();
	print_r($result);exit;
				
}
*/



 ?>